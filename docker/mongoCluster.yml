version: '3.8'
services:
  mongodb1:
    build:
      context: .
      args:
        DOCKER_BUILDKIT: 1
      dockerfile: Dockerfile
    image: mongocustom:6.0.2
    hostname: mongodb1
    container_name: mongodb1
    networks:
      - mongonet
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
    command: --config /etc/mongod.conf --port 27017
    healthcheck:
      test: mongosh --port 27017 --eval "db.adminCommand('ping')"
      interval: 15s
      timeout: 5s
      retries: 5

  mongodb2:
    build:
      context: .
      args:
        DOCKER_BUILDKIT: 1
      dockerfile: Dockerfile
    image: mongocustom:6.0.2
    container_name: mongodb2
    hostname: mongodb2
    networks:
      - mongonet
    ports:
      - "27018:27018"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
    command: --config /etc/mongod.conf --port 27018
    healthcheck:
      test: mongosh --port 27018 --eval "db.adminCommand('ping')"
      interval: 15s
      timeout: 5s
      retries: 5

  mongodb3:
    build:
      context: .
      args:
        DOCKER_BUILDKIT: 1
      dockerfile: Dockerfile
    image: mongocustom:6.0.2
    container_name: mongodb3
    hostname: mongodb3
    networks:
      - mongonet
    ports:
      - "27019:27019"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpassword
    command: --config /etc/mongod.conf --port 27019
    healthcheck:
      test: mongosh --port 27019 --eval "db.adminCommand('ping')"
      interval: 15s
      timeout: 5s
      retries: 5

  mongoinit:
    build: .
    image: mongocustom:6.0.2
    hostname: mongodbinit
    container_name: mongodbinit
    networks:
      - mongonet
    depends_on:
      mongodb1:
        condition: service_healthy
      mongodb2:
        condition: service_healthy
      mongodb3:
        condition: service_healthy
    command: >
      mongosh --host mongodb1:27017 --username admin --password adminpassword --authenticationDatabase admin --eval
      '
        rs.initiate(
          {
            _id: "replica_set_single",
            version: 1,
            members: [
              { _id: 0, host: "mongodb1:27017" },
              { _id: 1, host: "mongodb2:27018" },
              { _id: 2, host: "mongodb3:27019" }
            ]
          }
        );
      '

networks:
  mongonet: {}
